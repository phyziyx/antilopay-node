/**
 * Antilopay Payment Processor Node.js SDK
 * @module antilopay-node
 * @version 1.1.0
 * @author phyziyx
 * @license MIT
 *
 * This SDK is designed to be used in Node.js (or equivalent environments) only.
 * It is not designed to be used in the browser or in a webview.
 * The API documentation can be found at https://doc.antilopay.com/AntilopayAPI.pdf
 */

import axios from 'axios';
import crypto from 'crypto';

//
//
// Interfaces and Types
//
//

/**
 * Only 'payment' is supported.
 * The other types are not supported by this SDK.
 */
export type AntilopayPaymentType = 'payment' | 'withdraw' | 'refund' | 'popup';
export type AntilopayTransactionStatus =
  | 'PENDING'
  | 'SUCCESS'
  | 'FAIL'
  | 'CANCEL'
  | 'EXPIRED'
  | 'CHARGEBACK'
  | 'REVERSED';
export type AntilopayPaymentMethod = 'CARD_RU' | 'SBP' | 'SBER_PAY';
export type AntilopayPaymentCurrency = 'RUB';
export type AntilopayProductType = 'goods' | 'services';
export type AntilopayPayoutMethod =
  | 'CARD_RU'
  | 'QIWI'
  | 'CRYPTO_TRON_USDT'
  | 'STEAM';
export type AntilopayFeeType = 'BALANCE' | 'ORDER';
export type AntilopayPayoutStatus =
  | 'PENDING'
  | 'WAIT_ANSWER'
  | 'FAIL'
  | 'COMPLETE';

export interface IAntilopayBalance {
  available: number;
  blocked: number;
  withdraw: number;
}

export interface IAntilopayProjectBalanceResponse extends IAntilopayError {
  project_indentificator: string;
  rub: IAntilopayBalance;
  usd?: IAntilopayBalance;
}

export interface IAntilopayWebhookResponse {
  type: AntilopayPaymentType;
  /**
   * The unique identifier for the payment, generated by Antilopay.
   */
  payment_id: string;
  /**
   * The unique order identifier for the payment, generated by the merchant.
   */
  order_id: string;
  /**
   * The time the payment was created.
   */
  ctime: string;
  /**
   * The amount of the payment.
   */
  amount: number;
  /**
   * The original amount of the payment.
   */
  original_amount: number;
  /**
   * The fee for the payment.
   */
  fee: number;
  /**
   * The status of the payment.
   */
  status: AntilopayTransactionStatus;
  /**
   * The currency of the payment.
   */
  currency: AntilopayPaymentCurrency;
  /**
   * The product name of the payment.
   * This is used for display purposes only and does not affect the payment.
   */
  product_name: string;
  /**
   * The description of the payment.
   * This is used for display purposes only and does not affect the payment.
   */
  description: string;
  /**
   * The payment method used for the payment.
   */
  pay_method: AntilopayPaymentMethod;
  /**
   * The payment details.
   */
  pay_data: string;
  /**
   * The IP address of the customer.
   */
  customer_ip: string;
  /**
   * The user agent of the customer.
   */
  customer_useragent: string;
  /**
   * The customer's details.
   */
  customer: IAntilopayCustomer;
  /**
   * Merchant's technical information, maximum 255 characters.
   */
  merchant_extra: string;
}

interface IAntilopayServiceConstructor {
  projectId: string;
  secretId: string;
  secretKey: string;
  callbackKey: string;
}

export interface IAntilopaySignatureCheckResponse {
  status: 'ok';
}

export interface IAntilopayPaymentIntent {
  /**
   * The payment amount in your currency.
   * The amount must be a positive number.
   * Two decimal places are allowed.
   * @required
   */
  amount: number;
  /**
   * The order identifier for the payment.
   * The order identifier must be unique for each payment.
   * @required
   */
  order_id: string;
  /**
   * The amount currency for the payment.
   * @required
   */
  currency: AntilopayPaymentCurrency;
  /**
   * The name of the product or service being purchased.
   * This is used for display purposes only and does not affect the payment.
   * @required
   */
  product_name: string;
  /**
   * The type of product or service being purchased.
   * @required
   */
  product_type: AntilopayProductType;
  /**
   * The quantity of the product or service being purchased.
   * Minimum value is 1.
   * @optional
   * @default 1
   */
  product_quantity?: number;
  /**
   * The VAT rate for the payment.
   * Seems to be in %, such as 10, 20 etc.
   * Mandatory if the merchant's tax system is OSNO.
   * @optional
   * @default 0
   */
  vat?: number;
  /**
   * The payment description.
   * This is used for display purposes only and does not affect the payment.
   * @required
   */
  description: string;
  /**
   * The URL to redirect the user to after the payment is completed successfully.
   * @optional
   */
  success_url?: string;
  /**
   * The URL to redirect the user to after the payment is cancelled or failed.
   * @optional
   */
  fail_url?: string;
  /**
   * Customer's details
   */
  customer: AntilopayCustomer;
  /**
   * The payment method to use for the payment.
   * This is a list of payment methods that are supported by Antilopay.
   * @optional
   */
  prefer_methods?: AntilopayPaymentMethod[];
  /**
   * Merchant's technical information, maximum 255 characters.
   * @optional
   */
  merchant_extra?: string;
  /**
   * Additional parameters for the payment.
   * @optional
   */
  params?: IAntilopayPaymentIntentParams;
}

export interface IAntilopayPaymentIntentParams {
  direct_nspk: boolean;
}

export interface IAntilopayError {
  /**
   * The error code for the payment.
   * 0 - success
   * anything else - error
   */
  code: number;
  error: string;
}

export interface IAntilopayPayoutResponse extends IAntilopayError {
  /**
   * Payment identifier, generated by Antilopay.
   */
  withdraw_id: string;
}

export interface IAntilopayPaymentStatusResponse extends IAntilopayError {
  payment_id: string;
  order_id: string;
  payment_url: string;
  ctime: string;
  amount: number;
  original_amount: number;
  fee: number;
  status: AntilopayTransactionStatus;
  currency: AntilopayPaymentCurrency;
  product_name: string;
  description: string;
  pay_method: AntilopayPaymentMethod;
  pay_data: string;
  customer: IAntilopayCustomer;
  merchant_extra: string;
}

interface IAntilopayPaymentIntentResponse extends IAntilopayError {
  payment_id: string;
  payment_url: string;
}

type AntilopayPaymentIntentResponsePlain = IAntilopayPaymentIntentResponse & {
  direct_nspk: false;
};

type IAntilopayPaymentIntentResponseNSPK = IAntilopayPaymentIntentResponse & {
  direct_nspk: true;
  transaction_id: string;
};

export type AntilopayPaymentIntentResponse =
  | AntilopayPaymentIntentResponsePlain
  | IAntilopayPaymentIntentResponseNSPK;

export interface IAntilopayPayout {
  /**
   * The unique identifier for the payment.
   */
  orderId: string;
  /**
   * The amount to be paid out.
   */
  amount: number;
  /**
   * The method of payout.
   */
  method: AntilopayPayoutMethod;
  /**
   * The withdrawal address.
   * - For CARD_RU, this is the card number.
   * - For QIWI, this is the phone number.
   * - For CRYPTO_TRON_USDT, this is the wallet address.
   * - For STEAM, this is the Steam ID.
   */
  account: string;
  /**
   * The unique order identifier for the payment, generated by the merchant.
   */
  feeType: AntilopayFeeType;
}

export interface IAntilopayPayoutStatusResponse extends IAntilopayError {
  withdraw_id: string;
  order_id: string;
  ctime: string;
  status: AntilopayPayoutStatus;
  amount: number;
  fee: number;
  fee_type: AntilopayFeeType;
  currency: AntilopayPaymentCurrency;
  provide_method: AntilopayPayoutMethod;
}

export interface IAntilopayRefundResponse extends IAntilopayError {
  /**
   * The unique identifier for the refund, generated by Antilopay.
   */
  refund_id: string;
}

export interface IAntilopayReverseResponse extends IAntilopayRefundResponse {}

export interface IAntilopayRefundResponse extends IAntilopayError {
  /**
   * The unique identifier for the refund, generated by Antilopay.
   */
  refund_id: string;
  /**
   * The Merchant's unique identifier for the payment.
   */
  order_id: string;
  /**
   * The unique identifier for the payment associated with this refund.
   */
  payment_id: string;
  /**
   * The status of the refund.
   */
  status: AntilopayPayoutStatus;
  /**
   * The amount of the refund.
   */
  amount: number;
}

/**
 * The customer details for the payment.
 * You may provide either email or phone or both.
 */
export interface IAntilopayCustomer {
  email?: string | null;
  phone?: string | null;
  address: string;
  ipAddress: string;
  fullName: string;
}

//
//
// Classes
//
//

export class AntilopayCustomer implements IAntilopayCustomer {
  public email?: string | null;
  public phone?: string | null;
  public address: string;
  public ipAddress: string;
  public fullName: string;

  constructor({
    email,
    phone,
    address,
    ipAddress,
    fullName,
  }: IAntilopayCustomer) {
    if (!email && !phone) {
      throw new Error('Either email or phone must be provided.');
    }

    this.email = email;
    this.phone = phone;
    this.address = address;
    this.ipAddress = ipAddress;
    this.fullName = fullName;
  }

  public toJSON() {
    return {
      email: this.email,
      phone: this.phone,
      address: this.address,
      ip: this.ipAddress,
      fullname: this.fullName,
    };
  }
}

export class AntilopayService {
  private static instance: AntilopayService | null = null;

  /**
   * The base URL for the Antilopay API.
   * @default "https://lk.antilopay.com/api/v1"
   */
  private baseUrl: string = 'https://lk.antilopay.com/api/v1';
  /**
   * The API version for the Antilopay API.
   * Used in the API header 'X-Apay-Sign-Version'.
   * @default 1
   */
  private apiVersion: number = 1;

  /**
   * The signing algorithm for the Antilopay API.
   * The output produced by the signing algorithm is used to sign the API request
   * and is used in the API header 'X-Apay-Sign'.
   * @default "RSA-SHA256"
   */
  private signingAlgorithm: string = 'RSA-SHA256';

  /**
   * The output format for the signing algorithm.
   * @default "base64"
   */
  private signingAlgorithmOutput: crypto.BinaryToTextEncoding = 'base64';

  /**
   * The project ID for the Antilopay account.
   * This is used to identify the account when making API requests.
   * Used in the API header 'X-Apay-Project-Id'.
   */
  private projectId: string = '';
  /**
   * The secret ID for the Antilopay account.
   * This is provided by Antilopay and known as the merchant ID.
   * Used in the API header 'X-Apay-Secret-Id'.
   */
  private secretId: string = '';
  /**
   * Antilopay uses RSA keys.  This is a PEM formatted private key.
   * This is used to sign the API requests. You have received this key from Antilopay.
   * @example
   * -----BEGIN RSA PRIVATE KEY-----\n<SECRET KEY>\n-----END RSA PRIVATE KEY-----
   */
  private secretKey: string = '';
  /**
   * Antilopay uses RSA keys.  This is a PEM formatted public key.
   * This is used to verify the Webhook signature. You have received this key from Antilopay.
   * @example
   * -----BEGIN PUBLIC KEY-----\n<PUBLIC KEY>\n-----END PUBLIC KEY-----
   */
  private callbackKey: string = '';

  private constructor() {}

  /**
   * Get the instance of the AntilopayService.
   * @returns {AntilopayService}
   */
  public static getInstance(): AntilopayService {
    if (!this.instance) {
      this.instance = new AntilopayService();
    }

    return this.instance;
  }

  /**
   * Initialise the Antilopay Service singleton with the credentials.
   * @param
   */
  public init({
    projectId,
    secretId,
    secretKey,
    callbackKey,
  }: IAntilopayServiceConstructor): void {
    this.projectId = projectId;
    this.secretId = secretId;
    this.secretKey = secretKey;
    this.callbackKey = callbackKey;
  }

  /**
   * Set the base URL for the API.
   * @param url
   */
  public setBaseUrl(url: string): void {
    this.baseUrl = url;
  }

  /**
   * Get the base URL for the API.
   * @returns
   */
  public getBaseUrl(): string {
    return this.baseUrl;
  }

  /**
   * Set the API version for the API.
   * @param version
   */
  public setApiVersion(version: number): void {
    this.apiVersion = version;
  }

  /**
   * Get the API version for the API.
   * @returns
   */
  public getApiVersion(): number {
    return this.apiVersion;
  }

  /**
   * Get the project ID for the API.
   * @returns
   */
  public getProjectId(): string {
    return this.projectId;
  }

  /**
   * Get the secret ID for the API.
   * @returns
   */
  public getSecretId(): string {
    return this.secretId;
  }

  /**
   * Get the API headers for the API.
   * @returns
   */
  public getApiHeaders(payload: object): Record<string, string | number> {
    const signature = this.generateSignature(payload);

    return {
      'Content-Type': 'application/json',
      Accept: 'application/json',
      'X-Apay-Secret-Id': this.secretId,
      'X-Apay-Sign-Version': this.apiVersion,
      'X-Apay-Sign': signature,
    };
  }

  /**
   * Generate the signature for the API request.
   * This is used to authenticate the request with the Antilopay API.
   * @param payload The payload to sign, must a JSON object.
   * @returns The signature for the API request.
   */
  private generateSignature(payload: object): string {
    const data = JSON.stringify(payload);

    const signature = crypto.createSign(this.signingAlgorithm);
    signature.update(data);
    signature.end();

    const sign = signature.sign(this.secretKey, this.signingAlgorithmOutput);
    return sign;
  }

  /**
   * Verify the signature for the API request locally.
   * @param payload The payload to verify, must be a JSON object.
   * @param signature The signature to verify, found in header as 'X-Apay-Callback'.
   * @returns {boolean} True if the signature is valid, false otherwise.
   */
  public async verifySignature(
    payload: object,
    signature: string,
  ): Promise<boolean> {
    const data = JSON.stringify(payload);

    const verify = crypto.createVerify(this.signingAlgorithm);
    verify.update(data);
    verify.end();

    return verify.verify(
      this.callbackKey,
      signature,
      this.signingAlgorithmOutput,
    );
  }

  /**
   * Verify the signature for the API request.
   * @param payload The payload to verify, must be a JSON object.
   * @returns {IAntilopaySignatureCheckResponse | IAntilopayError}
   */
  public async verifySignatureRemote(
    payload: object,
  ): Promise<IAntilopaySignatureCheckResponse | IAntilopayError> {
    return await this.post<IAntilopaySignatureCheckResponse | IAntilopayError>(
      `/signature/check`,
      payload,
    );
  }

  /**
   * Create a payment intent with the Antilopay API.
   * @param paymentIntent The payment intent to create.
   * @returns The payment intent response.
   * @example
   * const paymentIntent = await AntilopayService.getInstance().createPaymentIntent({
   *   amount: 100,
   *   order_id: '1',
   *   currency: 'RUB',
   *   product_name: 'Test Product',
   *   product_type: 'goods',
   *   product_quantity: 1,
   *   vat: 0,
   *   description: 'Test Product',
   *   success_url: 'https://example.com/success',
   *   fail_url: 'https://example.com/fail',
   *   customer: new AntilopayCustomer({
   *     email: 'customer@example.com',
   *     fullName: 'John Doe',
   *     ipAddress: '127.0.0.1',
   *   }),
   *   prefer_methods: ['CARD_RU', 'SBP', 'SBER_PAY'],
   *   merchant_extra: 'Test Merchant Extra',
   *   params: {
   *     direct_nspk: true,
   *   },
   * });
   */
  public async createPaymentIntent(
    paymentIntent: IAntilopayPaymentIntent,
  ): Promise<AntilopayPaymentIntentResponse> {
    const payload = {
      ...paymentIntent,
      project_identificator: this.projectId,
    };

    const responseData = await this.post<AntilopayPaymentIntentResponse>(
      `/payment/create`,
      payload,
    );

    return responseData;
  }

  /**
   * Get the payment status for a payment.
   * @param orderId The order identifier for the payment.
   * @returns {Promise<IAntilopayPaymentStatusResponse>} The payment status response.
   */
  public async getPaymentStatus(
    orderId: string,
  ): Promise<IAntilopayPaymentStatusResponse> {
    const payload = {
      project_identificator: this.projectId,
      order_id: orderId,
    };

    const responseData = await this.post<IAntilopayPaymentStatusResponse>(
      `/payment/check`,
      payload,
    );

    return responseData;
  }

  /**
   * Process the webhook response from Antilopay.
   * @param payload The payload to process, must be a JSON object.
   * @param signature The signature to verify, found in header as 'X-Apay-Callback'.
   * @throws {Error} If the signature is invalid.
   * @returns {Promise<IAntilopayWebhookResponse>} The webhook response, if valid.
   */
  public async processWebhook(
    payload: object,
    signature: string,
  ): Promise<IAntilopayWebhookResponse> {
    const response = await this.verifySignature(payload, signature);

    if (!response) {
      throw new Error('Invalid webhook signature');
    }

    return payload as IAntilopayWebhookResponse;
  }

  /**
   * Create a payout with the Antilopay API.
   * @param payoutIntent The payout intent to create.
   * @returns {Promise<IAntilopayPayoutResponse>} The payout response.
   */
  public async createPayout(
    payoutIntent: IAntilopayPayout,
  ): Promise<IAntilopayPayoutResponse> {
    const payload = {
      ...payoutIntent,
      project_identificator: this.projectId,
    };

    const responseData = await this.post<IAntilopayPayoutResponse>(
      `/withdraw/create`,
      payload,
    );

    return responseData;
  }

  /**
   * Get the payout status.
   * @param withdrawId The withdraw identifier for the payment.
   * @param orderId The order identifier for the payment.
   * @returns {Promise<IAntilopayPayoutStatusResponse>} The payout status response.
   */
  public async getPayoutStatus(
    withdrawId: string,
    orderId: string,
  ): Promise<IAntilopayPayoutStatusResponse> {
    const payload = {
      project_identificator: this.projectId,
      withdraw_id: withdrawId,
      order_id: orderId,
    };

    const responseData = await this.post<IAntilopayPayoutStatusResponse>(
      `/withdraw/check`,
      payload,
    );

    return responseData;
  }

  /**
   * Get the payout status.
   * @param withdrawId The withdraw identifier for the payment.
   * @param orderId The order identifier for the payment.
   * @returns {Promise<IAntilopayRefundResponse>} The payout status response.
   */
  public async createRefund(
    transactionId: string,
    orderId: string,
    amount: number,
  ): Promise<IAntilopayRefundResponse> {
    const payload = {
      project_identificator: this.projectId,
      transaction_id: transactionId,
      order_id: orderId,
      amount,
    };

    const responseData = await this.post<IAntilopayRefundResponse>(
      `/refund/create`,
      payload,
    );

    return responseData;
  }

  /**
   * Get the refund status.
   * @param refundId The transaction identifier for the refund.
   * @param orderId The order identifier for the payment.
   * @returns {Promise<AntilopayRefundStatusResponse>} The refund status response.
   */
  public async getRefundStatus(
    refundId: string,
    orderId: string,
  ): Promise<IAntilopayRefundResponse> {
    const payload = {
      project_identificator: this.projectId,
      refund_id: refundId,
      order_id: orderId,
    };

    const responseData = await this.post<IAntilopayRefundResponse>(
      `/refund/check`,
      payload,
    );

    return responseData;
  }

  /**
   * Get the payout status.
   * @param transactionId The transaction identifier for the payment.
   * @param orderId The order identifier for the payment.
   * @returns {Promise<IAntilopayReverseResponse>} The payout status response.
   */
  public async createReverse(
    transactionId: string,
    orderId: string,
  ): Promise<IAntilopayReverseResponse> {
    const payload = {
      project_identificator: this.projectId,
      transaction_id: transactionId,
      order_id: orderId,
    };

    const responseData = await this.post<IAntilopayReverseResponse>(
      `/reverse/create`,
      payload,
    );

    return responseData;
  }

  /**
   * Get the project balance.
   * @returns {Promise<IAntilopayProjectBalanceResponse>} The project balance response.
   */
  public async getProjectBalance(): Promise<IAntilopayProjectBalanceResponse> {
    const payload = {
      project_identificator: this.projectId,
    };

    const responseData = await this.post<IAntilopayProjectBalanceResponse>(
      `/project/balance`,
      payload,
    );

    return responseData;
  }

  private async post<T>(endpoint: string, payload: object): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const headers = this.getApiHeaders(payload);

    const response = await axios.post(url, payload, {
      headers,
    });

    return response.data as T;
  }
}
